#!/usr/bin/env python3

import sys
import os
import traceback
import hashlib
import arrow
import ics

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

CACHE = os.path.expanduser('~/.cache/calendar/{}')
CALENDARS = os.path.expanduser('~/.config/calendar/config')

with open(CALENDARS, 'r') as _calendars:

    _calendars = list(line.rstrip('\n')
                      for line in _calendars if line[0] != '#')


calendar = ics.Calendar()

allevents = calendar.events

for _calendar in _calendars:

    h = hashlib.sha1(_calendar.encode()).hexdigest()

    filename = CACHE.format(h)

    log('loading {} from {}'.format(_calendar, filename))

    try:

        with open(filename, 'rb') as fd:

            data = fd.read()
            text = data.decode()

            calendar = ics.Calendar(text)

            for event in calendar.events:
                allevents.append(event)

    except FileNotFoundError as err:

        log('Error reading cache for: {}'.format(_calendar))
        log(err)
        traceback.print_tb(err.__traceback__, file=sys.stderr)


now = arrow.now()
today = now.floor('day')
tomorrow = today.replace(days=+1)
dayaftertomorrow = tomorrow.replace(days=+1)
nextweek = now.floor('week').replace(weeks=+1)
weekafternextweek = nextweek.replace(weeks=+1)
nextmonth = now.floor('month').replace(months=+1)
monthafternextmonth = nextmonth.replace(months=+1)

_fresh = set(filter(lambda x: x.end >= now, allevents))

sections = []

timesections = [
    ["Past", None, today],
    ["Today", today, tomorrow],
    ["Tomorrow", tomorrow, dayaftertomorrow],
    ["Rest of week", dayaftertomorrow, nextweek],
    ["Next week", nextweek, weekafternextweek],
    ["Rest of month", weekafternextweek, nextmonth],
    ["Next month", nextmonth, monthafternextmonth],
    ["Future", monthafternextmonth, None],
]

for name, begin, end in timesections:

    predicate = lambda x: (begin is None or x.begin >= begin) and (
        end is None or x.begin < end)

    events = set(filter(predicate, _fresh))

    A = 'the beginning of the Universe' if begin is None else begin.format(
        'YYYY-MM-DD HH:mm:ss')
    B = 'the end of the Universe' if end is None else end.format(
        'YYYY-MM-DD HH:mm:ss')

    title = (name + ', from {} to {}').format(A, B)

    sections.append((title, events))

_happening = set(filter(lambda x: x.begin < now, _fresh))
_future = _fresh - _happening
_current = min(_happening, key=lambda x: x.end, default=None)
_next = min(_future, key=lambda x: x.begin, default=None)

_main = None

if _current is None:

    if _next is not None:

        _main = _next

else:

    _main = _current if _next is None or _next.begin >= _current.end else _next

BLUE = '\033[94m'
YELLOW = '\033[93m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
ENDC = '\033[0m'


for title, events in sections:

    if not events:
        continue

    print()
    print(UNDERLINE + title + ENDC)
    print()

    for event in sorted(events, key=lambda x: x.begin):

        name = event.name
        location = event.location
        begin = event.begin.to('local')
        end = event.end.to('local')

        # event format
        ef = '{begin} ({hbegin}) - {name}'
        if begin < now:
            ef = '(started {hbegin}, ends {hend}) - {name}'

        if location :
            ef += ' (ï„¤ {location})'

        # time format for begin
        bf = 'YYYY, MMM DD, HH:mm'
        if begin.year == now.year:
            if begin.month == now.month:
                if begin.day == now.day:
                    bf = 'HH:mm'
                else:
                    bf = 'ddd DD, HH:mm'
            else:
                bf = 'MMM DD, HH:mm'

        if _main is not None and event == _main:
            ef = UNDERLINE + ef + ENDC
        if _next is not None and event == _next:
            ef = YELLOW + ef + ENDC
        if _current is not None and event == _current:
            ef = BLUE + ef + ENDC
        if event in _happening:
            ef = BOLD + ef + ENDC

        line = ef.format(
            begin = begin.format(bf),
            hbegin = begin.humanize(),
            hend = end.humanize( ) ,
            name = name,
            location = location
        )

        print( ' * ' + line )
