#!/usr/bin/env python3

import os
import sys
import json
import arrow

from subprocess import run, check_output

CONFIG = os.path.expanduser('~/.config/geolocation/config')

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

with open(CONFIG) as _config:
    config = json.load(_config)

try:

    geolocation = json.loads(check_output(
        ['memoize-get', '1800', 'ipgeolocation.fetch']).decode())

except Exception as err:

    log( err )

    geolocation = {}

try:

    fingerprint = dict(json.loads(check_output(
        ['memoize-get', '1800', 'wifi.fingerprint.distances']).decode()))

except Exception as err:

    log( err )

    fingerprint = {}

wifi = None


def getwifiservices():

    global wifi

    if wifi is None:

        services = check_output(['connmanctl', 'services']).decode()

        data = services.splitlines()

        connected = None

        for line in data:

            if line[:3] == '*AO':
                connected = line[3:]

        wifi = (services, connected)

        log(*wifi)

    return wifi


def evaluate(tag, tests):

    score = 0

    if 'TRUE' in tests:

        if any(run(test).returncode != 0 for test in tests['TRUE']):

            return 0

        score += len(tests['TRUE']) * 3

        log('[{}] ok TRUE'.format(tag))

    if 'FALSE' in tests:

        if any(run(test).returncode == 0 for test in tests['FALSE']):

            return 0

        score += len(tests['FALSE']) * 3

        log('[{}] ok FALSE'.format(tag))

    if 'true' in tests:

        for test in tests['true']:

            if run(test).returncode == 0:

                score += 1

                log('[{}] ok true {}'.format(tag, test))

    if 'false' in tests:

        for test in tests['false']:

            if run(test).returncode != 0:

                score += 1

                log('[{}] ok false {}'.format(tag, test))

    if 'wifi' in tests:

        _, connected = getwifiservices()

        for string in tests['wifi']:

            if string in connected:

                score += 5

                log('[{}] ok connected {}'.format(tag, string))

    if 'wifi-fingerprint' in tests:

        for wifitag in tests['wifi-fingerprint']:

            if wifitag in fingerprint:

                distance = fingerprint[wifitag]

                score += (1 - distance) * 10

                log('[{}] ok fingerprint {} ({})'.format(tag, wifitag, distance))

    return score

scores = []

for tag, tests in config["tag"].items():

    scores.append((evaluate(tag, tests), tag))

log(scores)

score, tag = max(scores)

geolocation["tag"] = tag

json.dump(geolocation, sys.stdout)
