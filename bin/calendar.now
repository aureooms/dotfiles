#!/usr/bin/env python3

import sys
import os
import traceback
import hashlib
import arrow
import ics

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

CACHE = os.path.expanduser('~/.cache/calendar/{}')
CALENDARS = os.path.expanduser('~/.config/calendar/config')

with open(CALENDARS, 'r') as _calendars:

    _calendars = list(line.rstrip('\n')
                      for line in _calendars if line[0] != '#')


calendar = ics.Calendar()

events = calendar.events

for _calendar in _calendars:

    h = hashlib.sha1(_calendar.encode()).hexdigest()

    filename = CACHE.format(h)

    log('loading {} from {}'.format(_calendar, filename))

    try:

        with open(filename, 'rb') as fd:

            data = fd.read()
            text = data.decode()

            calendar = ics.Calendar(text)

            for event in calendar.events:
                events.append(event)

    except FileNotFoundError as err:

        log('Error reading cache for: {}'.format(_calendar))
        log(err)
        traceback.print_tb(err.__traceback__, file=sys.stderr)


try:

    now = arrow.now()

    _fresh = list(filter(lambda x: x.end >= now, events))
    _future = filter(lambda x: x.begin >= now, _fresh)
    _happening = filter(lambda x: x.begin < now, _fresh)
    _current = min(_happening, key=lambda x: x.end, default=None)
    _next = min(_future, key=lambda x: x.begin, default=None)

    if _current is None:

        if _next is None:

            raise ValueError('no main event')

        else:

            _main = _next

    else:

        _main = _current if _next is None or _next.begin >= _current.end else _next

    name = _main.name
    begin = _main.begin.to('local')

    ef = '{} - {} ({})'
    if begin < now:
        ef = '{0} (started {2})'
    bf = 'YYYY, MMM D, HH:mm'
    if begin.year == now.year:
        if begin.month == now.month:
            if begin.day == now.day:
                bf = 'HH:mm'
            else:
                bf = 'ddd D, HH:mm'
        else:
            bf = 'MMM D, HH:mm'

    print(ef.format(name, begin.format(bf), begin.humanize()))

except ValueError:

    print()
