#!/usr/bin/env python3

import os
import subprocess
from colored import fore, back, style

UNITS_DIR = os.path.expanduser("~/.config/systemd/user")
OK = frozenset(['active'])
KO = frozenset(['failed', 'dead'])

units = filter(lambda x : os.path.isfile(os.path.join(UNITS_DIR, x)), os.listdir(UNITS_DIR))

STATUS_CMD = ['systemctl', '--user', '--all', '--no-pager', '--no-legend', '--type', 'service']
ENABLE_CMD = ['systemctl', '--user', 'is-enabled']

status = {}

for line in subprocess.check_output(STATUS_CMD).decode().splitlines():

    unit, load, active, sub, description = map(lambda x : x.strip(), line.split(maxsplit=4))

    # status[unit] = {
        # 'LOAD' : load,
        # 'ACTIVE' : active,
        # 'SUB' : sub,
        # 'DESCRIPTION' : description
    # }

    status[unit] = load, active, sub, description

def unit_key ( unit ) :

    if unit not in status:
        return 1, unit

    load, active, sub, description = status[unit]

    return 0, active not in OK, active in KO, unit

units = sorted(units, key = unit_key )

for unit in units:

    name = unit if unit[-8:] != '.service' else unit[:-8]

    try:
        enabled = subprocess.check_output(ENABLE_CMD + [unit])
    except subprocess.CalledProcessError as e:
        enabled = e.output

    enabled = enabled.decode().splitlines()[0]

    if unit in status:

        load, active, sub, description = status[unit]

        text = '{}{}{} ({}{}{}, {}{}{}, {}{}{}, {}{}{})'.format(
            style.BOLD, name, style.RESET,
            fore.GREY_50 + style.BOLD, load, style.RESET,
            fore.GREY_50 + style.BOLD, active, style.RESET,
            fore.GREY_50 + style.BOLD, sub, style.RESET,
            fore.GREY_50 + style.BOLD, enabled, style.RESET
        )

        if active in OK :
            mark = fore.GREEN + '' + style.RESET

        elif active in KO :
            mark = fore.RED + '' + style.RESET

        else:
            mark = fore.BLUE + '' + style.RESET

    else:

        text = '{}{}{}'.format(style.BOLD, name, style.RESET)
        mark = fore.RED + '' + style.RESET

    x = '' if enabled == 'enabled' else ' '

    print(' {}  {} {}'.format(x, mark, text))
