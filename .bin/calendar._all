#!/usr/bin/env python3

import sys
import os
import traceback
import hashlib
import arrow
import datetime
import ics
import json
import re

REGEX_URL = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\), ]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
EXCLUDED_URLS = [
    'https://g.co/calendar',
]

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

def _humanize(time, ref):

    x = time.humanize(ref)

    if x == "in seconds":

        return "in {} seconds".format((time - ref).seconds)

    if x == "just now":

        return "now"

    return x


def _duration(A, B):

    x = _humanize(B, A)

    if x == 'now':

        return '{} seconds'.format((B - A).seconds)

    if x == 'in a minute':

        return '1 minute'

    return x[3:]

def _range ( now , begin , end ) :

    if end - begin < datetime.timedelta(1) :
        hour = True
    elif begin.to('utc').time().minute != end.to('utc').time().minute :
        hour = True
    elif begin.to('utc').time().second != end.to('utc').time().second :
        hour = True
    elif begin.to('utc').time().hour in [ 22 , 23 , 0 ] and end.to('utc').time().hour in [ 22 , 23 , 0 ] :
        hour = False
    else :
        hour = True

    if hour :

        bf = 'YYYY, MMM DD, HH:mm'
        if begin.year == now.year:
            if begin.month == now.month:
                if begin.day == now.day:
                    bf = 'HH:mm'
                else :
                    bf = 'ddd DD, HH:mm'
            else:
                bf = 'MMM DD, HH:mm'

        ef = 'YYYY, MMM DD, HH:mm'
        if end.year == begin.year:
            if end.month == begin.month:
                if end.day == begin.day:
                    ef = 'HH:mm'
                else:
                    ef = 'DD, HH:mm'
            else:
                ef = 'MMM DD, HH:mm'

    else :

        bf = 'YYYY, MMM DD'
        if begin.year == now.year:
            if begin.month == now.month:
                if begin.day == now.day:
                    bf = 'HH:mm'
                else :
                    bf = 'ddd DD'
            else:
                bf = 'MMM DD'

        ef = 'YYYY, MMM DD'
        if end - begin < datetime.timedelta(365) :
            if end.month == begin.month:
                ef = 'DD'
            else:
                ef = 'MMM DD'

    return begin.format( bf ) + ' - ' + end.format( ef )


def _shortduration(A, B):

    return _shorten(_duration(A, B))


def _shorthumanize(time, ref):

    return _shorten(_humanize(time, ref))

def _tinyduration(A, B):

    return _tinier(_duration(A, B))


def _tinyhumanize(time, ref):

    return _tinier(_humanize(time, ref))


def _shorten(x):

    if 'minutes' in x or 'seconds' in x:

        return x[:-4]

    if 'minute' in x:

        return x[:-3]

    return x

def _tinier(x):

    if 'minutes' in x or 'seconds' in x:

        return x[:-6]

    if 'minute' in x:

        return x[:-5]

    return x

def _icon(event):

    name = event.name.lower()

    if 'flight' in name:
        return ''

    elif 'train' in name or 'thalys' in name or 'sncf' in name:
        return ''

    elif 'dentist' in name or 'doctor' in name:
        return ''

    else:
        return icons[event]



CACHE = os.path.expanduser('~/.cache/calendar/fresh/{}')
CALENDARS = os.path.expanduser('~/.config/calendar/config')

with open(CALENDARS, 'r') as fd:

    _calendars = json.load( fd )['calendars']

calendar = ics.Calendar()

allevents = calendar.events
icons = {}

for _calendar in _calendars:

    url = _calendar['url']

    h = hashlib.sha1(url.encode()).hexdigest()

    filename = CACHE.format(h)

    log('loading {} from {}'.format(url, filename))

    try:

        with open(filename, 'rb') as fd:

            data = fd.read()
            text = data.decode()

            calendar = ics.Calendar(text)

            for event in calendar.events:
                allevents.add(event)
                icons[event] = _calendar['icon']

    except FileNotFoundError as err:

        log('Error reading cache for: {}'.format(url))
        log(err)
        traceback.print_tb(err.__traceback__, file=sys.stderr)


now = arrow.now()
today = now.floor('day')
tomorrow = today.replace(days=+1)
dayaftertomorrow = tomorrow.replace(days=+1)
nextweek = now.floor('week').replace(weeks=+1)
weekafternextweek = nextweek.replace(weeks=+1)
nextmonth = now.floor('month').replace(months=+1)
monthafternextmonth = nextmonth.replace(months=+1)

_fresh = set(filter(lambda x: x.end >= now, allevents))

sections = []

timesections = [
    ["Past", None, today],
    ["Today", today, tomorrow],
    ["Tomorrow", tomorrow, dayaftertomorrow],
    ["Rest of week", dayaftertomorrow, nextweek],
    ["Next week", nextweek, weekafternextweek],
    ["Rest of month", weekafternextweek, nextmonth],
    ["Next month", nextmonth, monthafternextmonth],
    ["Future", monthafternextmonth, None],
]

used = set()

for name, begin, end in timesections:

    predicate = lambda x: (begin is None or x.begin >= begin) and (
        end is None or x.begin < end)

    events = set(filter(predicate, _fresh)) - used

    A = 'the beginning of the Universe' if begin is None else begin.format(
        'YYYY-MM-DD HH:mm:ss')
    B = 'the end of the Universe' if end is None else end.format(
        'YYYY-MM-DD HH:mm:ss')

    title = (name + ', from {} to {}').format(A, B)

    sections.append((title, events))

    used |= events

_happening = set(filter(lambda x: x.begin < now, _fresh))
_future = _fresh - _happening
_current = min(_happening, key=lambda x: x.end, default=None)
_next = min(_future, key=lambda x: x.begin, default=None)

_main = None

if _current is None:

    if _next is not None:

        _main = _next

else:

    _main = _current if _next is None or _next.begin >= _current.end else _next

BLUE = '\033[94m'
YELLOW = '\033[93m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
ENDC = '\033[0m'


print()
print( ' > Generated on {}'.format(now.format('ddd, DD MMM YYYY HH:mm:ss Z')) )

for title, events in sections:

    if not events:
        continue

    print()
    print(UNDERLINE + title + ENDC)
    print()

    for event in sorted(events, key=lambda x: x.begin):

        name = event.name
        location = event.location
        description = event.description
        begin = event.begin.to('local')
        end = event.end.to('local')

        # event format
        if begin >= now:
            ef = ' {icon}  {range} ({hbegin}) - {name}'
        else:
            ef = ' {icon}  (started {hbegin}, ends {hend}) - {name}'

        if location and location not in name:
            ef += ' ( {location})'

        url = []
        if description and description not in name:
            match = re.findall(REGEX_URL, description)
            url = list(filter(lambda x: x not in EXCLUDED_URLS, match))
            if url:
                # could use
                # https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
                # instead
                ef += ' ( {url[0]})'


        if _main is not None and event == _main:
            ef = UNDERLINE + ef + ENDC
        if _next is not None and event == _next:
            ef = YELLOW + ef + ENDC
        if _current is not None and event == _current:
            ef = BLUE + ef + ENDC
        if event in _happening:
            ef = BOLD + ef + ENDC

        line = ef.format(
            icon = _icon(event),
            hbegin = begin.humanize(),
            range = _range( now , begin , end ) ,
            hend = end.humanize( ) ,
            hduration = 'lasts ' +  _duration( begin , end ) ,
            name = name,
            location = location,
            url = url
        )

        line = line.replace('\r', '')
        line = line.replace('\n', ' ')

        print( line )
