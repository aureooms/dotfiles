#!/usr/bin/env python3

"""Example of using hangups to count the number of unread messages."""

import sys
import os
import time
import random
import asyncio
import hangups
import logging
import json

logging.basicConfig(level=logging.INFO,format='%(asctime)s %(message)s',
        datefmt='%Y-%m-%d %I:%M:%S %p')

# Path where OAuth refresh token is saved, allowing hangups to remember your
# credentials.
REFRESH_TOKEN_PATH = os.path.expanduser('~/.cache/hangups/refresh_token.txt')
CACHE = os.path.expanduser('~/.cache/hangups/_status')

conv_list = None
typing_status = None

def main():
    """Main entry point."""

    logging.info('Attempt to connect')

    client = None

    try:
        # Obtain hangups authentication cookies, raising an error if not found.

        def handler ( *x, **y ) :
            raise hangups.auth.GoogleAuthError('Could not find refresh token file')

        refresh_token_cache = hangups.auth.RefreshTokenCache(REFRESH_TOKEN_PATH)

        cookies = hangups.auth.get_auth(handler , refresh_token_cache)

        # Instantiate hangups Client instance.
        client = hangups.Client(cookies)

        # Add an observer to the on_connect event to run the
        # _on_connect coroutine when hangups has finished
        # connecting.
        client.on_connect.add_observer(lambda: asyncio.async(
            _on_connect(client)
        ))

        client.on_state_update.add_observer( _on_state_update )

        # Start an asyncio event loop by running Client.connect. This will not
        # return until Client.disconnect is called, or hangups becomes
        # disconnected.
        loop = asyncio.get_event_loop()
        loop.run_until_complete(client.connect())


    except hangups.auth.GoogleAuthError as e :
        logging.info('Failed to connect :(')
        error()

    finally:
        if client is not None :
            client.disconnect()

def num_unread ( conv ) :
    return len([conv_event for conv_event in conv.unread_events if
        isinstance(conv_event, hangups.ChatMessageEvent) and
        not conv.get_user(conv_event.user_id).is_self])

def output(x) :
    os.makedirs(os.path.dirname(CACHE),exist_ok=True)
    logging.info( "writing '{}' to '{}'".format(str(x),CACHE) )
    with open(CACHE,'w') as fd :
        json.dump(x,fd)

def error() :
    return output({ 'status' : 'error' })

def update() :

    if any( t == hangups.TYPING_TYPE_STARTED for t in typing_status.values()):
        status = 'typing'
    else :
        status = 'normal'

    count = sum( map( num_unread , conv_list.get_all() ) )
    return output( { 'status' : status , 'unread' : count } )

def _on_state_update ( state_update ) :
    notification_type = state_update.WhichOneof('state_update')
    if notification_type == 'typing_notification':
        typing_notification = state_update.typing_notification
        conv_id = typing_notification.conversation_id.id
        user_id = hangups.user.UserID(chat_id=typing_notification.sender_id.chat_id,
                         gaia_id=typing_notification.sender_id.gaia_id)

        if not conv_list.get(conv_id).get_user(user_id).is_self :
            typing_status[(conv_id,user_id)] = typing_notification.type

    update()

@asyncio.coroutine
def _on_connect(client):

    global conv_list
    global typing_status

    typing_status = {}

    logging.info('Connected!')

    try :
        _, conv_list = yield from hangups.build_user_conversation_list(client)
        update()

    except Exception as e :
        logging.info(e)
        error()
        yield from client.disconnect()



if __name__ == '__main__':
    while True :
        try:
            main()
        except Exception as e :
            logging.info( e )
            error()
        wait = 60 + random.randint(0,60)
        logging.info('Waiting {} seconds before connecting again.'.format(wait))
        time.sleep(wait)
