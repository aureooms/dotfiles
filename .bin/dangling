#!/usr/bin/env python3

import os
from itertools import chain, zip_longest, filterfalse

def issafe ( children ) :
    """
        `children` must be sorted
    """
    return '.git' in children or '.stfolder' in children


def getchildren ( directory ) :

    allchildren = os.listdir( directory )
    # filterfalse == do not follow symbolic link
    nonlinkchildren = filterfalse( os.path.islink, allchildren )
    children = sorted( nonlinkchildren )

    return issafe(children) , (os.path.join( directory , x ) for x in children if x[0] != '.')

def recursive ( root ) :

    """
        `root` is the path of a directory.
    """

    safe , children = getchildren( root )

    if safe :
        return True , True , True , [ 0 ] , 0 , {}

    children = list(children)

    arenotsafe = {}
    someissafe = False
    count = 0
    dcount = 0

    for child in children :

        if not os.path.islink( child ) :

            if os.path.isdir( child ) :

                data = recursive( child )
                childisdir , childissafe , somegrandchildissafe , dgcc , gcc , grandchildren = data

                if childissafe:
                    someissafe = True

                else:
                    count += gcc # grandchildren count
                    arenotsafe[child] = data


            else :
                dcount += 1
                count += 1
                arenotsafe[child] = False , False , False , [ ] , 1 , child

    vcount = [ dcount ] + list( map( sum , zip_longest( *( c[3] for c in arenotsafe.values() ) , fillvalue = 0 ) ) )

    return True , False , someissafe , vcount , count , arenotsafe

def output ( root , data , max_count = 5 , max_level = 5 , sep = None , end = None ) :

    isdir , aresafe , someissafe , vcount , count , arenotsafe = data

    if isdir :

        if ( max_level > 0 ) and someissafe or (count <= max_count or max_count < 0):

            # if there is some backed up folder somewhere deep in the subtree
            # or
            # if the object count is small enough for this subtree
            # output subtree recursively

            for path, c in sorted( arenotsafe.items() ):

                output( path, c , max_count = max_count , max_level = max_level - 1, sep=sep, end=end)

        elif count > 0 :
            # otherwise
            # only output a total count
            print(root, count, sep=sep, end=end)

    else :

        print(arenotsafe, 1, sep=sep, end=end)

if __name__ == '__main__' :

    import argparse

    parser = argparse.ArgumentParser(description="Outputs file and directories that are not backed up with git or syncthing")
    parser.add_argument('-r', '--root', type=str, default='.', help='root directory')
    parser.add_argument('-n', '--short', action='store_true', help='short output')
    parser.add_argument('-j', '--json', action='store_true', help='json output')
    parser.add_argument('-c', '--max-count', type=int, default=5, help='count threshold output')
    parser.add_argument('-s', '--max-size', type=int, default=30, help='max output size')
    parser.add_argument('-l', '--max-level', type=int, default=-1, help='max output level')
    parser.add_argument('--sep', default=None, help='sep parameter for print')
    parser.add_argument('--end', default=None, help='end parameter for print')
    parser.add_argument('-z', '--null-terminated', action='store_true', help='null-terminate lines')
    args = parser.parse_args()

    if args.max_level < -1:
        parser.error('`--max-level` must be >= -1')

    if args.null_terminated:
        if args.end is not None:
            parser.error('You cannot specify both `--null-terminated` and `--end`.')
        end = '\0'
    else:
        end = args.end

    root = args.root
    data = recursive( root )

    max_level = args.max_level

    if args.max_count >= 0 and max_level == -1:
        size = args.max_size
        for s in data[3] :
            if size < s :
                break

            size -= s
            max_level += 1

    # print( max_level )

    if args.short :
        print( data[4] )
    elif args.json :
        import sys
        import json
        json.dump( { root : data } , sys.stdout )
    else :
        output( root , data , max_count = args.max_count , max_level = max_level , sep = args.sep , end = end )

