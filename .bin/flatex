#!/usr/bin/env python3

# from https://github.com/johnjosephhorton/flatex

import os
import re
import sys
import argparse

defaultext = {
    'input' : '.tex',
    'include': '.tex',
    'usepackage': '.sty',
}

def match(line, include_sty, expand_includes=True):
    """
    Determines whether or not a read in line contains an uncommented out
    \input{} statement. Allows only spaces between start of line and
    '\input{}'.
    """
    regexp = r"""^[^\%]*\\(input"""
    if expand_includes: regexp += r"""|include"""
    if include_sty: regexp += r"""|usepackage"""
    regexp += r"""){([^}]*)}"""
    return re.match(regexp, line)

def combine_path(base_path, relative_ref, defaultext='.tex'):
    """
    Combines the base path of the tex document being worked on with the
    relate reference found in that document.
    """
    if (base_path != ""):
        os.chdir(base_path)
    # Handle if .tex is supplied directly with file name or not
    if relative_ref.endswith(defaultext):
        return os.path.join(base_path, relative_ref)
    else:
        return os.path.abspath(relative_ref) + defaultext

def expand_file(base_file, current_path, include_bbl, include_sty, source=None):
    """
    Recursively-defined function that takes as input a file and returns it
    with all the inputs replaced with the contents of the referenced file.
    """
    try:
        output_lines = []
        with open(base_file, "r") as f:
            for line in f:
                m = match(line, include_sty)
                if m is not None :
                    t, arg = m.groups()
                    new_base_file = combine_path(current_path, arg, defaultext[t])
                    output_lines += expand_file(new_base_file, current_path, include_bbl, include_sty, source=line)
                elif include_bbl and line.startswith("\\bibliography") and (not line.startswith("\\bibliographystyle")):
                    output_lines += bbl_file(base_file)
                else:
                    output_lines.append(line)
        return output_lines

    except FileNotFoundError as e:

        if source is None: raise e

        return [source]


def bbl_file(base_file):
    """
    Return content of associated .bbl file
    """
    bbl_path = os.path.abspath(os.path.splitext(base_file)[0]) + '.bbl'
    return open(bbl_path).readlines()


def run(base_file, output_file, include_bbl = False, include_sty = False):

    current_path = os.path.split(base_file)[0]
    output_file.write(''.join(
        expand_file(
            base_file,
            current_path,
            include_bbl,
            include_sty
        )
    ))


def main():

    description="""
    This "flattens" a LaTeX document by replacing all \input{X} lines w/ the
    text actually contained in X.
    """
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('base_file')
    parser.add_argument('output_file', type=argparse.FileType('w'))
    parser.add_argument('--include_bbl', dest='bbl', action='store_true')
    parser.add_argument('--no_bbl', dest='bbl', action='store_false')
    parser.add_argument('--include_sty', dest='sty', action='store_true')
    parser.add_argument('--no_sty', dest='sty', action='store_false')

    args = parser.parse_args()

    base_file = args.base_file
    output_file = args.output_file
    include_bbl = args.bbl
    include_sty = args.sty

    run(base_file, output_file, include_bbl=include_bbl, include_sty=include_sty)


if __name__ == '__main__':
    main()
