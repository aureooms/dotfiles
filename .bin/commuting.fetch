#!/usr/bin/env python3

import os
import sys
import json
import arrow
import subprocess
from collections import defaultdict

CONFIG = os.path.expanduser('~/.config/commuting/config')

STIBCACHE = os.path.expanduser('~/.cache/stib')
STIBCONFIG = os.path.expanduser('~/.config/stib/config')

STIBHALT = STIBCACHE + '/{}'
STIBLINE = STIBHALT + '/{}'

RTMCACHE = os.path.expanduser('~/.cache/rtm')
RTMCONFIG = os.path.expanduser('~/.config/rtm/config')

RTMHALT = RTMCACHE + '/{}'
RTMLINE = RTMHALT + '/{}'
RTMDEST = RTMLINE + '/{}'
RTMTIME = RTMDEST + '/{}'


log = lambda *x, **y: print(*x, **y, file=sys.stderr)

with open(CONFIG) as _config:
    config = json.load(_config)

with open(STIBCONFIG) as _config:
    stibconfig = json.load(_config)

with open(RTMCONFIG) as _config:
    rtmconfig = json.load(_config)

geolocation = json.loads(subprocess.check_output(
    ['memoize-get', '1200', 'geolocation.fetch']).decode())

def istransit(method):
    return method in [ 'train' , 'tram' , 'metro' , 'bus' ]

pt = (part for road in config.values() for path in
        road['paths'] for part in
               path['path'] if istransit(part['method']))


def stibgrab(halt, line):

    try:

        return sorted(map(arrow.get, os.listdir(STIBLINE.format(halt, line))))

    except FileNotFoundError:

        log('no STIB data for', halt, line)

        return []


def rtmgrab(halt, line, dest):

    try:

        return sorted(map(arrow.get, os.listdir(RTMDEST.format(halt, line, dest))))

    except FileNotFoundError:

        log('no RTM data for', halt, line, dest)

        return []



def _humanize(time, ref):

    x = time.humanize(ref)

    if x == "in seconds":

        return "in {} seconds".format((time - ref).seconds)

    if x == "just now":

        return "now"

    return x


def _duration(A, B):

    x = _humanize(B, A)

    if x == 'now':

        return '{} seconds'.format((B - A).seconds)

    if x == 'in a minute':

        return '1 minute'

    return x[3:]


def _shortduration(A, B):

    return _shorten(_duration(A, B))


def _shorthumanize(time, ref):

    return _shorten(_humanize(time, ref))

def _tinyduration(A, B):

    return _tinier(_duration(A, B))


def _tinyhumanize(time, ref):

    return _tinier(_humanize(time, ref))


def _shorten(x):

    if 'minutes' in x or 'seconds' in x:

        return x[:-4]

    if 'minute' in x:

        return x[:-3]

    return x

def _tinier(x):

    if 'minutes' in x or 'seconds' in x:

        return x[:-6]

    if 'minute' in x:

        return x[:-5]

    return x


def _repr(path,fduration=_shortduration):

    _map = {
        "wait": lambda part : '  ({})'.format(fduration(part['seconds'])),
        "walk": lambda part : '  ',
        "tram": lambda part : {
            "stib-mivb" : lambda part: '  {line}'.format(**part),
            "rtm"       : lambda part: '  {line}'.format(**part),
        }[part['vendor']](part),
        "bus": lambda part: {
            "stib-mivb" : lambda part: '  {line}'.format(**part),
            "rtm"       : lambda part: '  {line}'.format(**part),
            "tec"       : lambda part: '  {line}'.format(**part),
        }[part['vendor']](part),
        "metro": lambda part: {
            "stib-mivb" : lambda part: '  {line}'.format(**part),
            "rtm"       : lambda part: '  {line}'.format(**part),
        }[part['vendor']](part),
        "train": lambda part : {
            "sncb-nmbs" : lambda part: '  {line}'.format(**part),
        }[part['vendor']](part),
    }

    return '  '.join(_map[part['method']](part) for part in path)



def _diff(a, b):

    return a.datetime.timestamp() - b.datetime.timestamp()

PT = defaultdict(list)

def _key ( x ) :
    return frozenset( ( k , x[k] ) for k in x.keys() if k != 'seconds' )

for part in pt:

    vendor = part['vendor']

    if vendor == 'stib-mivb':

        halt = part['halt']
        line = part['line']

        if halt not in stibconfig or line not in stibconfig[halt]:

            log('warning: stib-mivb is not configured to fetch', halt, line)

        k = _key(part)
        if k not in PT:
            PT[k] = stibgrab(halt, line)

    elif vendor == 'rtm':

        halt = part['halt']
        line = part['line']
        dest = part['dest']

        if halt not in rtmconfig:

            log('warning: rtm is not configured to fetch', halt)

        k = _key(part)
        if k not in PT:
            PT[k] = rtmgrab(halt, line, dest)

    else:

        log('warning: unknown vendor ', vendor)


def allroutes():

    for name, road in config.items():

        for path in road['paths']:

            for route in routes(path['path']):

                yield name, route


def routes(path, leave=None, total=0, prev=()):

    if not path:

        yield leave, total, prev

        return

    if path[0]['method'] == 'walk':

        duration = path[0]['seconds']

        yield from routes(path[1:], leave, total + duration, prev + ( path[0], ))

    elif _key(path[0]) in PT :

        duration = path[0]['seconds']
        times = PT[_key(path[0])]

        if leave is None:

            for timestamp in times:

                _path = path[1:]
                _leave = timestamp.replace(seconds=-total)
                _total = total + duration
                _prev = prev + (path[0], )

                yield from routes(_path, _leave, _total, _prev)
        else:

            for timestamp in times:

                waiting = _diff(timestamp, leave) - total

                if waiting < 0:
                    continue

                elif waiting == 0:

                    _path = path[1:]
                    _leave = leave
                    _total = total + duration
                    _prev = prev + (path[0], )

                    yield from routes(_path, _leave, _total, _prev)

                else:

                    A = leave.replace(seconds=+total)
                    B = A.replace(seconds=+waiting)

                    _path = path[1:]
                    _leave = leave
                    _total = total + waiting + duration
                    part = {
                        'method' : 'wait',
                        'seconds' : waiting
                    }
                    _prev = prev + (part, path[0])

                    yield from routes(_path, _leave, _total, _prev)

NOW = arrow.now()

myroutes = []

for name, route in allroutes():

    _leave, _total, _path = route

    if _leave is None:
        _leave = NOW

    elif _leave < NOW:
        continue

    _arrival = _leave.replace(seconds=+_total)

    myroutes.append((name, _path, _leave, _arrival))

myroutes = sorted(myroutes, key=lambda x: (x[0], x[3], x[2]))


def myfilter(name):

    for key, value in config[name]['geolocation'].items():

        if not key in geolocation or geolocation[key] != value:

            return False

    if 'days' in config[name] and not NOW.format('dddd') in config[name]['days']:

        return False

    return True

for name, _path, _leave, _arrival in myroutes:

    if not myfilter(name):
        continue

    title = config[name]['title']
    leave = _shorthumanize(_leave, NOW)
    arrival = _shorthumanize(_arrival, NOW)
    total = _shortduration(_leave, _arrival)  # remove "in " prefix
    path = _repr(_path)
    eta = _arrival.format('HH:mm:ss')

    full_text = ' [{}]  {},  {},  {} :{} : ETA  {}'.format(
        title, leave, total, arrival, path, eta
    )

    sleave = _tinyduration(NOW, _leave)
    sarrival = _tinyduration(NOW, _arrival)
    stotal = _tinyduration(_leave, _arrival)
    spath = _repr(_path,fduration=_tinyduration)

    short_text = ' [{}] {}|{}|{} :{} :  {}'.format(
        title, sleave, stotal, sarrival, spath, eta
    )

    color = "#85bd85"

    if len(_path) > 1:

        d = _diff(_leave, NOW)

        if d < 600:

            if d < 60:

                color = "#CF4647"

            else:

                color = "#F45D4C"

    data = {
        "name"       : "commuting",
        "color"      : color,
        "full_text"  : full_text,
        "short_text" : short_text
    }

    json.dump(data, sys.stdout)
    sys.stdout.write('\n')
