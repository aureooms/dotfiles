#!/usr/bin/env python3

import json
import argparse
from pydub import AudioSegment
from pydub.generators import Sine
from collections import ChainMap

def silence ( config ) :

    return AudioSegment.silent(duration=config['duration'])


def note ( config ) :

    frequency = config['frequency']
    duration = config['duration']
    volume = config['volume']

    return Sine(frequency).to_audio_segment(duration=duration, volume=volume).fade_out(duration)


def patternitem ( config ) :

    if config['type'] == 'loop' :

        for i in range(config['repeat']) :

            yield from patternlist(config)

    elif config['type'] == 'note' :

        yield note(config)

    elif config['type'] == 'silence' :

        yield silence(config)

    else :

        raise Exception('unknown pattern item type `{}`'.format(config['type']))


def patternlist ( config ) :

    for item in config['pattern']:
        yield from patternitem(ChainMap(item, config))


def overlaypattern( audio , config ) :

    # generate overlaying pattern while avoiding wasting resources

    ms = len( audio )

    if ms == 0 :
        return audio

    pattern = AudioSegment.empty()

    for part in patternitem(config) :

        pattern += part

        if len(pattern) >= ms :
            break

    return audio * pattern # * overlays


def main ( ) :

    parser = argparse.ArgumentParser(description='Overlay beeper pattern on top of an existing audio file.')

    parser.add_argument('pattern', type=str, help='pattern JSON file')
    parser.add_argument('input', type=str, help='input filename')
    parser.add_argument('output', type=str, help='output filename')

    args = parser.parse_args()

    with open(args.pattern) as fd :
        config = json.load(fd)

    audio = AudioSegment.from_file( args.input )

    mix = overlaypattern( audio , config )

    mix.export(args.output)

if __name__ == '__main__' :
    main()
