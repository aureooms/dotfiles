#!/usr/bin/env python3

DEFAULT_FREQUENCY = 440 # Hz
DEFAULT_LENGTH = 200 # milliseconds
DEFAULT_PERIOD = 5000 # milliseconds
DEFAULT_VOLUME = 0.5 # 0 <= v <= 1

from scipy.io.wavfile import read, write
import numpy as np
import argparse
from math import ceil

def normalize ( sig , volume = 1 ) :
    return np.int16(sig/np.max(np.abs(sig)) * 32767 * volume)

def silence ( rate=None , length=None , **kwargs ) :
    size = int(ceil(rate*length/1000))
    return np.zeros((size,), dtype=np.int16)

def note ( frequency=None , rate=None , length=None , attenuate=None, volume=None, **kwargs ) :
    size = int(ceil(rate*length/1000))
    sig = np.cos((2*np.pi*frequency/rate)*np.arange(size))
    if attenuate:
        sig *= np.linspace(1,0,num=size)
    return normalize(sig, volume=volume)

def beep ( samples=None, period=None, rate=None, length=None, **kwargs) :

    _note = note(rate=rate, length=length, **kwargs)
    _silence = silence(rate=rate, length=period-length)

    _onebeep = np.concatenate((_note,_silence))
    _nbeeps = np.resize(_onebeep, samples)

    return _nbeeps

def overlay ( a , b ) :
    return a // 2 + b // 2

def main ( ) :

    parser = argparse.ArgumentParser(description='Overlay beeps on top of an existing audio file (WAV format).')

    parser.add_argument('input', type=str, help='input filename')
    parser.add_argument('output', type=str, help='output filename')
    parser.add_argument('-l' , '--length', type=float, default=DEFAULT_LENGTH, help='beep duration in milliseconds')
    parser.add_argument('-p' , '--period', type=float, default=DEFAULT_PERIOD, help='beep period in milliseconds')
    parser.add_argument('-v' , '--volume', type=float, default=DEFAULT_VOLUME, help='beep volume')
    parser.add_argument('-f' , '--frequency', type=float, default=DEFAULT_FREQUENCY, help='beep frequency')
    parser.add_argument('-a' , '--attenuate', action='store_true', help='flag for linear attenuation')

    args = parser.parse_args()

    rate, audio = read( args.input )

    _beep = beep( samples=len(audio), rate=rate , **vars(args) )

    data = overlay( audio , _beep )

    write( args.output , rate , data )

if __name__ == '__main__' :
    main()
