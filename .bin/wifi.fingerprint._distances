#!/usr/bin/env python3

import sys
import json

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

_current = json.load(sys.stdin)


def makedict(data):

    out = {}

    for cell in data:

        key = cell['ESSID'], cell['address'], cell['channel']
        value = cell['strength']

        out[key] = value

    return out


def distance(A, B, q=2):
    '''
        returns distance between 0 and 1
    '''

    keys = set(A.keys()).union(B.keys())

    if not keys:
        return 1

    d = 0

    for key in keys:

        a = A.get(key, 0)
        b = B.get(key, 0)

        d += (a - b)**q

    n = len(keys)

    rmsd = (d / n)**(1 / q)  # between 0 and 1

    # inspired from
    # http://www.hindawi.com/journals/ijdsn/2015/429104/
    # take into account common AP

    common = set(A.keys()).intersection(B.keys())

    c = len(common)  # if c is low, return value will be close to one

    return rmsd ** (c / n)

current = makedict(_current)
log(current)

args = sys.argv[1:]

candidates = [('?', 0.99)]

for arg in args:

    with open(arg) as _data:
        data = json.load(_data)

    tag = data['tag']
    _reference = data['fingerprint']
    reference = makedict(_reference)
    log(tag, reference)

    d = distance(current, reference)

    candidates.append((tag, d))

json.dump(sorted(candidates, key=lambda x: (x[1], x[0])), sys.stdout)
