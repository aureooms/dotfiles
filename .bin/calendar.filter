#!/usr/bin/env python3

import sys
import os.path
import traceback
import hashlib
import urllib.request
import urllib.error
import arrow
import ics
import json

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

CACHE = os.path.expanduser('~/.cache/calendar/{}')
FRESH = os.path.expanduser('~/.cache/calendar/fresh/{}')
CALENDARS = os.path.expanduser('~/.config/calendar/config')

try:
    os.makedirs(FRESH.format(''))
except:
    pass

with open(CALENDARS, 'r') as fd:

    _calendars = list(filter(lambda c: not c.get('hide'), json.load( fd )['calendars']))

now = arrow.now()

for _calendar in _calendars:

    url = _calendar['url']

    h = hashlib.sha1(url.encode()).hexdigest()

    cachefilename = CACHE.format(h)

    log('loading {} from {}'.format(url, cachefilename))

    try:

        with open(cachefilename, 'rb') as fd:

            data = fd.read()
            text = data.decode()

        calendar = ics.Calendar(text)

        calendar.events = set(filter(lambda x: x.end >= now, calendar.events))

        freshfilename = FRESH.format(h)

        log('writing {} to {}'.format(url, freshfilename))

        with open(freshfilename, 'w') as fd:

            fd.writelines(calendar)

    except ics.grammar.parse.ParseError as err:

        log('Error parsing file: {}'.format(url))
        log(err)
        traceback.print_tb(err.__traceback__, file=sys.stderr)

    except FileNotFoundError as err:

        log('Error reading file for {}'.format(url))
        log(err)
        traceback.print_tb(err.__traceback__, file=sys.stderr)
