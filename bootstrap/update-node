#!/usr/bin/env bash

if [ $(id -u) != "0" ]; then
  echo 'must be run as root'
  exit 1
fi

DOTFILES="$(dirname "$(dirname "${BASH_SOURCE}")")";

packages="$(sed -e 's/\s*#.*$//g' -e '/^$/d' "$DOTFILES"/bootstrap/packages/node)"

if false; then
#if command -v yarn 1>/dev/null; then

  echo "  # using yarn"

  yarn_installed="$(jq -r < /usr/local/share/.config/yarn/global/package.json '.dependencies | keys[]' 2>/dev/null)"

  function _install {
    to_install="$(comm -23 <(sort <<< "$packages") <(sort <<< "$yarn_installed"))"
    if [ -z "$to_install" ] ; then
      echo "  > nothing to install"
    else
      echo "  > installing ~ $(tr '\n' ' ' <<< "$to_install")"
      yarn global add $to_install
    fi
  }

  function _update {
    echo "  - upgrade global packages"
    yarn global upgrade --latest || exit "$?"
  }

elif command -v npm 1>/dev/null; then

  echo "  # using npm"

  npm_installed="$(ls -1 "$(npm root -g)")" # will not work with scoped packages

  function _install {
    to_install="$(comm -23 <(sort <<< "$packages") <(sort <<< "$npm_installed"))"
    if [ -z "$to_install" ] ; then
      echo "  > nothing to install"
    else
      echo "  > installing ~ $(tr '\n' ' ' <<< "$to_install")"
      npm install -g $to_install
    fi
  }

  function _update {
    echo "  - update global packages"
    npm update -g || exit "$?"
  }

else
  echo 'yarn or npm is not installed, install one via pacman first'
  exit 2
fi

x="${1:-i}"

export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1
if [ "$x" = i ] ; then
  _install
elif [ "$x" = u ] ; then
  _update
else
  echo "Option $x is not valid."
  exit 3
fi
unset PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
